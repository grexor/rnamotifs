#!/usr/bin/python
import os
import sys
import rnamotifs2
import pybio
import pickle
import random
random.seed(42)
import glob
import time
import argparse

import datetime, time
dt = datetime.datetime.today()
nocache = time.mktime(dt.timetuple()) # datetime in seconds

parser = argparse.ArgumentParser()
parser.add_argument('-comps', action="store", dest="comps", default=None)
args = parser.parse_args()

comps_folder = os.path.join(rnamotifs2.path.comps_folder, args.comps)
rnamotifs2.data.read(args.comps)
rnamotifs2.sequence.load(args.comps)

num_s, num_e, num_c = rnamotifs2.data.dist["s"], rnamotifs2.data.dist["e"], rnamotifs2.data.dist["c"]
print "RNA maps"
print "silenced=%s, enhanced=%s, controls=%s" % (num_s, num_e, num_c)

configs = {}

for region in ["r1s", "r1e", "r2s", "r2e", "r3s", "r3e"]:
    trees = glob.glob(os.path.join(comps_folder, region, "tree*.tab"))
    trees.sort()
    if len(trees)==0: # RESULT from single results0.tab file
        fname = os.path.join(comps_folder, region, "results0.tab")
        if os.path.exists(fname):
            f = open(fname, "rt")
            header = f.readline()
            r = f.readline()
            motif_cluster, h, fisher = r.replace("\n", "").replace("\r", "").split("\t")[:3]
            fisher = float(fisher)
            h = int(h)
            motif_cluster = [motif_cluster]
            if fisher<0.05:
                areas, _, stats = rnamotifs2.search.areas(args.comps, motif=motif_cluster, hw=15, h=h)
                configs.setdefault(region, []).append((fisher, h, motif_cluster, areas, stats))
    else: # RESULTS from tree
        for index, tree_fname in enumerate(trees):
            fisher, h, motif_cluster = rnamotifs2.draw.read_tree(tree_fname)
            areas, _, stats = rnamotifs2.search.areas(args.comps, motif=motif_cluster, hw=15, h=h)
            configs.setdefault(region, []).append((fisher, h, motif_cluster, areas, stats))

# examples of custom defined clusters that are drawn with other results

#areas, h, stats = rnamotifs2.search.areas(args.comps, motif=["YTCY", "YCTY"], h=5)
#configs.setdefault("r4", []).append((None, h, ["YTCY", "YCTY"], areas, stats))

#areas, h, stats = rnamotifs2.search.areas(args.comps, motif=["YTCY", "YCTY"], h=10)
#configs.setdefault("r4", []).append((None, h, ["YTCY", "YCTY"], areas, stats))

#areas, h, stats = rnamotifs2.search.areas(args.comps, motif=["YTCY", "YCTY"], h=15)
#configs.setdefault("r4", []).append((None, h, ["YTCY", "YCTY"], areas, stats))

#areas, h, stats = rnamotifs2.search.areas(args.comps, motif=["YTCY", "YCTY"], h=20)
#configs.setdefault("r4", []).append((None, h, ["YTCY", "YCTY"], areas, stats))

#areas, h, stats = rnamotifs2.search.areas(args.comps, motif=["YCAY"], h=5)
#configs.setdefault("r4", []).append((None, h, ["YCAY"], areas, stats))

#areas, h, stats = rnamotifs2.search.areas(args.comps, motif=["YCAY"], h=10)
#configs.setdefault("r4", []).append((None, h, ["YCAY"], areas, stats))

#areas, h, stats = rnamotifs2.search.areas(args.comps, motif=["YCAY"], h=15)
#configs.setdefault("r4", []).append((None, h, ["YCAY"], areas, stats))

#areas, h, stats = rnamotifs2.search.areas(args.comps, motif=["YCAY"], h=20)
#configs.setdefault("r4", []).append((None, h, ["YCAY"], areas, stats))

#areas, h, stats = rnamotifs2.search.areas(args.comps, motif=["TTTA", "TTAT"], h=5)
#configs.setdefault("r4", []).append((None, h, ["TTTA", "TTAT"], areas, stats))

#areas, h, stats = rnamotifs2.search.areas(args.comps, motif=["TTTA", "TTAT"], h=10)
#configs.setdefault("r4", []).append((None, h, ["TTTA", "TTAT"], areas, stats))

#areas, h, stats = rnamotifs2.search.areas(args.comps, motif=["TTTA", "TTAT"], h=15)
#configs.setdefault("r4", []).append((None, h, ["TTTA", "TTAT"], areas, stats))

#areas, h, stats = rnamotifs2.search.areas(args.comps, motif=["TTTA", "TTAT"], h=20)
#configs.setdefault("r4", []).append((None, h, ["TTTA", "TTAT"], areas, stats))

if not os.path.exists(os.path.join(comps_folder, "rnamap")):
    os.makedirs(os.path.join(comps_folder, "rnamap"))

# draw motifs
f = open(os.path.join(comps_folder, "rnamap", "index.html"), "wt")
f.write("<html>\n")

head = """<head>
<script type="text/javascript" src="../../software/js/jquery-1.8.0.min.js"></script>
<script type="text/javascript" src="../../software/js/jquery-ui-1.8.23.custom.min.js"></script>

<link rel="stylesheet" type="text/css" href="../../software/tooltipster-master/css/tooltipster.css" />
<script type="text/javascript" src="../../software/tooltipster-master/js/jquery.tooltipster.min.js"></script>

<script type="text/javascript" src="../../highslide/highslide/highslide.js"></script>
<link rel="stylesheet" type="text/css" href="../../highslide/highslide/highslide.css" />
<script type="text/javascript">
    hs.graphicsDir = '../../highslide/highslide/graphics/';
    hs.showCredits = false;
</script>

<style>

.highslide img {
   border: 0px;
   outline: none;
}

a {
    text-decoration: none;
}

div {
    font-size: 13px;
}

.my-tips {
	border-radius: 5px;
	border: 0.5px solid #000;
	background: #6c6c6c;
	color: #fff;
}

/* Use this next selector to style things like font-size and line-height: */
.my-tips .tooltipster-content {
	font-family: Arial, sans-serif;
	font-size: 12px;
	line-height: 13px;
	padding: 2px 3px;
}
</style>

</head>"""

f.write(head+"\n")

f.write("<body>\n")
f.write("<div>RNAmotifs2: <b>%s</b>, %s %s</div><br>" % (args.comps, time.strftime("%d.%m.%Y"), time.strftime("%H:%M:%S")))
f.write("<table style='border-collapse: collapse; border-spacing: 0px; font-size: 12px;'><tr><td align=center>motif cluster</td><td align=center width=15px>R1</td><td align=center width=15px>R2</td><td align=center width=15px>R3</td><td align=center>-50..200 (0=skip.start)</td><td align=center>-200..50 (0=in.start)</td><td align=center>-50..200 (0=in.stop)</td><td align=center>-200..50 (0=skip.stop)</td></tr>\n")

# find upper limit for ES
max_es = 0

for region, tree_list in configs.items():
    for tree in tree_list:
        fisher, h, motif_list, area, stats = tree

        # if we only have s / e features, take care of the others so the drawing is done
        for t in ["s", "e", "c"]:
            if t not in area:
                area[t] = [[0]*251, [0]*251, [0]*251, [0]*251]

        logs, loge = rnamotifs2.compute.es(area["s"], area["e"], area["c"])
        for a in range(0, 4):
            max_es = max(max_es, max(pybio.utils.smooth(logs[a])), max(pybio.utils.smooth(loge[a])))

for region, tree_list in configs.items():
    for index, tree in enumerate(tree_list):
        fisher, h, motif_list, area, stats = tree
        logs, loge = rnamotifs2.compute.es(area["s"], area["e"], area["c"])
        for a in range(0, 4):
            image_filename = "%s_tree%s_area%s" % (region, index, a+1)
            draw_sum = rnamotifs2.draw.area("+".join(motif_list), logs[a], loge[a], os.path.join(comps_folder, "rnamap", image_filename), area=a, region=region, limy=max_es, stats=stats)

regions = configs.keys()
regions.sort()

for region in regions:
    tree_list = configs[region]
    for index, tree in enumerate(tree_list):
        tree_file = "https://expressrna.org/rnamotifs2/%s/%s/%s" % (args.comps, region, "tree%s.tab" % index)
        fisher, h, motif_list, area, stats = tree
        logs, loge = rnamotifs2.compute.es(area["s"], area["e"], area["c"])

        # only draw trees with value > 1/3 * max_es in at least one area
        draw = False
        for a in range(0, 4):
            if max(logs[a])>max_es/3 or max(loge[a])>max_es/3:
                draw = True
        if not draw and region!="r4":
            continue

        f.write("<tr>")
        if region!="r4":
            f.write("<td align=right valign=center width=30px>%s<br><a href=%s target=_new>tree=%s</a><br>h=%s</td>" % ("+".join(motif_list), tree_file, index, h))
        else:
            f.write("<td align=right valign=center width=30px>%s<br>added<br>h=%s</td>" % ("+".join(motif_list), h))
        for r in ["r1", "r2", "r3"]:
            if region[:-1]==r:
                if region[-1]=="e":
                    color = "#ff0000"
                else:
                    color = "#0000ff"
            else:
                color = "#aaaaaa"
            title = ""
            f.write("<td valign=center align=center width=15px>")
            f.write("<svg xmlns='http://www.w3.org/2000/svg' version='1.1' width='18px' height='18px'>")
            cid = ""
            f.write("<circle id='%s' %s cx=9 cy=9 r=7 stroke=#ffffff stroke-width=1 fill='%s'/>" % (cid, title, color))
            f.write("</svg>")
            f.write("</td>")
        if region[:-1] in ["r1", "r2", "r3"]:
            for a in range(0, 4):
                f.write("<td>")
                image_filename = "%s_tree%s_area%s.png?nocache=%s" % (region, index, a+1, nocache)
                f.write("<a href=%s class='highslide' onclick='return hs.expand(this)'><img src=%s width=250></a>" % (image_filename, image_filename))
                f.write("</td>")
        if region in ["r4"]:
            for a in range(0, 4):
                f.write("<td>")
                image_filename = "%s_tree%s_area%s.png?nocache=%s" % (region, index, a+1, nocache)
                f.write("<a href=%s class='highslide' onclick='return hs.expand(this)'><img src=%s width=250></a>" % (image_filename, image_filename))
                f.write("</td>")
        f.write("</tr>")
f.write("\n")
f.write("</table>")

f.write("</body>")
f.write("</html>\n")
f.close()
